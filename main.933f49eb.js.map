{"version":3,"sources":["scripts/components/Tile.js","scripts/components/Grid.js","scripts/components/ViewManager.js","scripts/components/InputManager.js","scripts/components/GameManager.js","scripts/main.js"],"names":["Tile","coords","value","isMerged","isNew","htmlTileElement","undefined","row","cell","index","htmlElement","size","container","append","setTimeout","remove","Grid","view","changed","maxValue","addition","matrix","createMatrix","Array","from","length","getRandomEmptyCell","Math","random","tile","createTileElement","setTileHtmlElement","insertTileToGrid","insertTileToView","gameTiles","x","y","removeTileFromView","emptyCells","getAllEmptyCells","floor","checkEachCell","rowIndex","cellIndex","push","callback","revers","changeAxis","prepareGridBeforeMoving","prepareTilesBeforeMoving","current","next","increment","movementAlgorithm","insertTileToGame","nextIndex","currentIndex","x1","x2","y1","y2","isTileExist","moveTileToNewCoords","tilesValueEqual","mergerTiles","setTileCoords","valueAfterMerging","setTilePositionRelativeToCell","removeTileFromGrid","updateMergerInfo","flat","some","i","xAxisMergerPossible","yAxisMergerPossible","ViewManager","gameSize","gameBody","document","querySelector","gameGrid","gameMessage","gameCurrentScore","gameCells","initialize","createGameGridCells","gameCell","createElement","won","over","hiddenTiles","classList","add","resetNoLoopGif","score","textContent","gameAdditionScore","grid","setTileClassName","className","getTilePositionRelativeToCell","left","top","style","offsetLeft","offsetTop","offsetWidth","offsetHeight","filter","sort","tileX","tileY","forEach","tiles","type","innerText","element","background","tryAgain","Date","getTime","backgroundSize","backgroundPosition","backgroundRepeat","replaceChildren","InputManager","touchTarget","target","moveCallback","updateCallback","direction","touchStartX","touchStartY","keydownListener","handleKeyDown","bind","tuchStartListener","handleTouchStart","tuchEndListener","handleTouchEnd","initEvents","e","key","preventDefault","changedTouches","screenX","screenY","diffX","diffY","ratioX","abs","ratioY","absDiff","swipeDirection","addEventListener","removeEventListener","GameManager","winValue","input","setEventCallbacks","moveTiles","updateState","emptyCellsAvailable","mergerTilesPossible","isPossibleToContinue","removeEvents","updateGameState","updateScoreState","updateTilesState","clear","game","closest","reload"],"mappings":"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","file":"main.933f49eb.js","sourceRoot":"..\\src","sourcesContent":["export class Tile {\n  constructor(coords, value, isMerged, isNew) {\n    this.value = value;\n    this.htmlTileElement = undefined;\n\n    this.isNew = isNew;\n    this.isMerged = isMerged;\n\n    this.coords = {\n      row: coords.row,\n      cell: coords.cell,\n      index: coords.index,\n    };\n  }\n\n  setTileHtmlElement(htmlElement) {\n    this.htmlTileElement = htmlElement;\n  }\n\n  setTileCoords(row, cell, size) {\n    this.coords = {\n      row: row,\n      cell: cell,\n      index: cell + row * size,\n    };\n  };\n\n  insertTileToView(container) {\n    container.append(this.htmlTileElement);\n  }\n\n  removeTileFromView() {\n    setTimeout(() => {\n      this.htmlTileElement.remove();\n    }, 200);\n  }\n}\n","import { Tile } from './Tile';\n\nexport class Grid {\n  constructor(size, view) {\n    this.size = size;\n    this.view = view;\n    this.changed = false;\n    this.maxValue = 0;\n    this.addition = 0;\n    this.matrix = this.createMatrix(this.size);\n  }\n\n  createMatrix(size) {\n    return Array.from({ length: size }, () =>\n      Array.from({ length: size }, () => null));\n  }\n\n  insertTileToGame(\n    coords = this.getRandomEmptyCell(),\n    value = Math.random() < 0.9 ? 2 : 4,\n    isMerged = false,\n    isNew = true\n  ) {\n    const tile = new Tile(coords, value, isMerged, isNew);\n    const htmlElement = this.view.createTileElement();\n\n    tile.setTileHtmlElement(htmlElement);\n\n    this.insertTileToGrid(tile);\n  };\n\n  insertTileToGrid(tile) {\n    tile.insertTileToView(this.view.gameTiles);\n    this.matrix[tile.coords.row][tile.coords.cell] = tile;\n  };\n\n  removeTileFromGrid(x, y) {\n    this.matrix[x][y].removeTileFromView();\n    this.matrix[x][y] = null;\n  };\n\n  getRandomEmptyCell() {\n    const emptyCells = this.getAllEmptyCells();\n\n    if (emptyCells.length) {\n      return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    }\n  };\n\n  getAllEmptyCells() {\n    const emptyCells = [];\n\n    this.checkEachCell((rowIndex, cellIndex, cell) => {\n      if (!(cell instanceof Tile)) {\n        emptyCells.push({\n          row: rowIndex,\n          cell: cellIndex,\n          index: cellIndex + rowIndex * this.size,\n        });\n      }\n    });\n\n    return emptyCells;\n  };\n\n  checkEachCell(callback) {\n    for (let rowIndex = 0; rowIndex < this.size; rowIndex++) {\n      for (let cellIndex = 0; cellIndex < this.size; cellIndex++) {\n        callback(rowIndex, cellIndex, this.matrix[rowIndex][cellIndex]);\n      }\n    }\n  }\n\n  prepareGridBeforeMoving() {\n    this.changed = false;\n    this.addition = 0;\n  }\n  prepareTilesBeforeMoving() {\n    this.checkEachCell((rowIndex, cellIndex, tile) => {\n      if (tile) {\n        tile.isNew = false;\n        tile.isMerged = false;\n      }\n    });\n  }\n\n  moveTiles({ revers, changeAxis }) {\n    this.prepareGridBeforeMoving();\n    this.prepareTilesBeforeMoving();\n\n    for (let index = 0; index < this.size; index++) {\n      const current = revers ? this.size - 1 : 0;\n      const next = revers ? current - 1 : 1;\n      const increment = revers ? -1 : 1;\n\n      this.movementAlgorithm(current, next, increment, index, changeAxis);\n    }\n\n    if (this.changed) {\n      this.insertTileToGame();\n    }\n  }\n\n  movementAlgorithm(current, next, increment, index, changeAxis) {\n    let currentIndex = current;\n    let nextIndex = next;\n\n    while (nextIndex >= 0 && nextIndex < this.size) {\n      const x1 = changeAxis ? nextIndex : index;\n      const x2 = changeAxis ? currentIndex : index;\n      const y1 = changeAxis ? index : nextIndex;\n      const y2 = changeAxis ? index : currentIndex;\n\n      if (this.isTileExist(x1, y1)) {\n        nextIndex += increment;\n      } else {\n        if (this.isTileExist(x2, y2)) {\n          this.moveTileToNewCoords(x1, x2, y1, y2);\n          this.changed = true;\n          nextIndex += increment;\n        } else if (this.tilesValueEqual(x1, x2, y1, y2)) {\n          this.mergerTiles(x1, x2, y1, y2);\n          this.changed = true;\n          currentIndex += increment;\n          nextIndex += increment;\n        } else {\n          currentIndex += increment;\n\n          if (currentIndex === nextIndex) {\n            nextIndex += increment;\n          }\n        }\n      }\n    }\n  }\n\n  tilesValueEqual(x1, x2, y1, y2) {\n    return this.matrix[x2][y2].value === this.matrix[x1][y1].value;\n  }\n\n  moveTileToNewCoords(x1, x2, y1, y2) {\n    this.matrix[x2][y2] = this.matrix[x1][y1];\n    this.matrix[x2][y2].setTileCoords(x2, y2, this.size);\n    this.matrix[x1][y1] = null;\n  }\n\n  mergerTiles(x1, x2, y1, y2) {\n    const { coords, value } = this.matrix[x2][y2];\n    const valueAfterMerging = value * 2;\n\n    this.matrix[x1][y1].setTileCoords(x2, y2, this.size);\n    this.view.setTilePositionRelativeToCell(this.matrix[x2][y2]);\n    this.view.setTilePositionRelativeToCell(this.matrix[x1][y1]);\n    this.removeTileFromGrid(x2, y2);\n    this.removeTileFromGrid(x1, y1);\n\n    this.insertTileToGame(coords, valueAfterMerging, true, false);\n    this.updateMergerInfo(valueAfterMerging);\n  }\n\n  updateMergerInfo(value) {\n    this.addition += value;\n\n    if (this.maxValue < value) {\n      this.maxValue = value;\n    }\n  }\n\n  isTileExist(x, y) {\n    return !this.matrix[x][y];\n  }\n\n  emptyCellsAvailable() {\n    return !!this.getAllEmptyCells().length;\n  }\n\n  mergerTilesPossible() {\n    return this.matrix.flat().some((tile, i, matrix) => {\n      if (tile) {\n        const xAxisMergerPossible = matrix[i + 1] && (i + 1) % 4 !== 0\n          ? tile.value === matrix[i + 1].value\n          : false;\n\n        const yAxisMergerPossible = matrix[i + 4]\n          ? tile.value === matrix[i + 4].value\n          : false;\n\n        return xAxisMergerPossible || yAxisMergerPossible;\n      }\n    });\n  }\n}\n","import { Tile } from './Tile';\nimport tryAgain from '../../images/try-again.gif';\n\nexport class ViewManager {\n  constructor(size) {\n    this.gameSize = size;\n    this.gameBody = document.querySelector('.game-body');\n    this.gameGrid = document.querySelector('.game-body__grid');\n    this.gameTiles = document.querySelector('.game-body__tiles');\n    this.gameMessage = document.querySelector('.game-body__message');\n    this.gameCurrentScore = document.querySelector('.game-score__current');\n    this.gameCells = [];\n\n    this.initialize();\n  }\n\n  initialize() {\n    this.createGameGridCells();\n  }\n\n  createGameGridCells() {\n    for (let i = 0; i < this.gameSize * this.gameSize; i++) {\n      const gameCell = this.createElement('div', 'game-body__cell');\n\n      this.gameGrid.append(gameCell);\n      this.gameCells.push(gameCell);\n    }\n  }\n\n  createTileElement() {\n    return this.createElement('div', 'tile');\n  }\n\n  updateGameState(matrix, won, over) {\n    if (won || over) {\n      this.hiddenTiles(matrix);\n    }\n\n    if (won) {\n      this.gameMessage.classList.add('game-body__message--won');\n    }\n\n    if (over) {\n      this.resetNoLoopGif('.game-body__try-again');\n      this.gameMessage.classList.add('game-body__message--over');\n    }\n  }\n\n  updateScoreState(score, addition) {\n    this.gameCurrentScore.textContent = `${score}`;\n\n    if (addition) {\n      const gameAdditionScore = this.createElement(\n        'div',\n        'game-score__addition',\n        `+${addition}`);\n\n      this.gameCurrentScore.append(gameAdditionScore);\n\n      setTimeout(() => {\n        gameAdditionScore.remove();\n      }, 800);\n    }\n  }\n\n  updateTilesState(grid) {\n    grid.checkEachCell((rowIndex, cellIndex, tile) => {\n      if (tile instanceof Tile) {\n        this.setTileClassName(tile);\n        this.setTilePositionRelativeToCell(tile);\n      }\n    });\n  }\n\n  setTileClassName(tile) {\n    if (tile.isNew) {\n      tile.htmlTileElement.className = `tile tile--${tile.value} tile--new`;\n    } else if (tile.isMerged) {\n      tile.htmlTileElement.className = `tile tile--${tile.value} tile--merged`;\n    } else {\n      tile.htmlTileElement.className = `tile tile--${tile.value}`;\n    }\n  }\n\n  setTilePositionRelativeToCell(tile) {\n    // eslint-disable-next-line no-shadow\n    const { left, top } = this.getTilePositionRelativeToCell(tile);\n\n    tile.htmlTileElement.style.left = `${left}%`;\n    tile.htmlTileElement.style.top = `${top}%`;\n  }\n\n  getTilePositionRelativeToCell(tile) {\n    const { offsetLeft, offsetTop } = this.gameCells[tile.coords.index];\n\n    return {\n      left: offsetLeft / this.gameGrid.offsetWidth * 100,\n      top: offsetTop / this.gameGrid.offsetHeight * 100,\n    };\n  }\n\n  hiddenTiles(matrix) {\n    matrix.flat().filter(tile => tile).sort((tileX, tileY) => {\n      return tileX.coords.index - tileY.coords.index;\n    }).forEach((tile, i, tiles) => {\n      setTimeout(() => {\n        tile.htmlTileElement.classList.add('tile--hidden');\n      }, (1200 / tiles.length) * i);\n    });\n  }\n\n  createElement(type, className, innerText = '') {\n    const element = document.createElement(type);\n\n    element.className = className;\n    element.innerText = innerText;\n\n    return element;\n  }\n\n  resetNoLoopGif(className) {\n    const element = document.querySelector(className);\n\n    element.style.background = `url(${tryAgain}?${new Date().getTime()})`;\n    element.style.backgroundSize = '107%';\n    element.style.backgroundPosition = 'center';\n    element.style.backgroundRepeat = 'no-repeat';\n  }\n\n  clear() {\n    this.gameMessage.className = 'game-body__message';\n\n    this.gameGrid.replaceChildren();\n    this.gameTiles.replaceChildren();\n  }\n}\n","export class InputManager {\n  constructor(touchTarget) {\n    this.target = touchTarget;\n    this.moveCallback = undefined;\n    this.updateCallback = undefined;\n\n    this.direction = {\n      'ArrowLeft': {\n        revers: false,\n        changeAxis: false,\n      },\n      'ArrowUp': {\n        revers: false,\n        changeAxis: true,\n      },\n      'ArrowRight': {\n        revers: true,\n        changeAxis: false,\n      },\n      'ArrowDown': {\n        revers: true,\n        changeAxis: true,\n      },\n    };\n\n    this.touchStartX = 0;\n    this.touchStartY = 0;\n\n    this.keydownListener = this.handleKeyDown.bind(this);\n    this.tuchStartListener = this.handleTouchStart.bind(this);\n    this.tuchEndListener = this.handleTouchEnd.bind(this);\n\n    this.initialize();\n  }\n\n  initialize() {\n    this.initEvents();\n  }\n\n  setEventCallbacks(moveCallback, updateCallback) {\n    this.moveCallback = moveCallback;\n    this.updateCallback = updateCallback;\n  }\n\n  handleKeyDown(e) {\n    const { key } = e;\n\n    if (this.direction[key]) {\n      e.preventDefault();\n      this.moveCallback(this.direction[key]);\n\n      this.updateCallback();\n    }\n  };\n\n  handleTouchStart(e) {\n    this.touchStartX = e.changedTouches[0].screenX;\n    this.touchStartY = e.changedTouches[0].screenY;\n  }\n\n  handleTouchEnd(e) {\n    const diffX = e.changedTouches[0].screenX - this.touchStartX;\n    const diffY = e.changedTouches[0].screenY - this.touchStartY;\n    const ratioX = Math.abs(diffX / diffY);\n    const ratioY = Math.abs(diffY / diffX);\n    const absDiff = Math.abs(ratioX > ratioY ? diffX : diffY);\n    const key = this.swipeDirection(diffX, diffY, ratioX, ratioY);\n\n    if (absDiff < 30) {\n      return;\n    }\n\n    if (this.direction[key]) {\n      e.preventDefault();\n      this.moveCallback(this.direction[key]);\n\n      this.updateCallback();\n    }\n  }\n\n  swipeDirection(diffX, diffY, ratioX, ratioY) {\n    if (ratioX > ratioY) {\n      if (diffX >= 0) {\n        return 'ArrowRight';\n      } else {\n        return 'ArrowLeft';\n      }\n    } else {\n      if (diffY >= 0) {\n        return 'ArrowDown';\n      } else {\n        return 'ArrowUp';\n      }\n    }\n  }\n\n  initEvents() {\n    document.addEventListener('keydown', this.keydownListener);\n    this.target.addEventListener('touchstart', this.tuchStartListener);\n    this.target.addEventListener('touchend', this.tuchEndListener);\n  }\n\n  removeEvents() {\n    document.removeEventListener('keydown', this.keydownListener);\n    this.target.removeEventListener('touchstart', this.tuchStartListener);\n    this.target.removeEventListener('touchend', this.tuchEndListener);\n  }\n}\n","import { Grid } from './Grid';\nimport { ViewManager } from './ViewManager';\nimport { InputManager } from './InputManager';\n\nexport class GameManager {\n  constructor(size, winValue) {\n    this.size = size;\n    this.winValue = winValue;\n    this.score = 0;\n    this.over = false;\n    this.won = false;\n\n    this.view = new ViewManager(this.size);\n    this.grid = new Grid(this.size, this.view);\n    this.input = new InputManager(this.view.gameBody);\n\n    this.initialize();\n  }\n\n  initialize() {\n    this.grid.insertTileToGame();\n    this.grid.insertTileToGame();\n\n    this.input.setEventCallbacks(\n      this.grid.moveTiles.bind(this.grid),\n      this.updateState.bind(this)\n    );\n\n    this.updateState();\n  }\n\n  isPossibleToContinue() {\n    return this.grid.emptyCellsAvailable() || this.grid.mergerTilesPossible();\n  }\n\n  updateState() {\n    this.score += this.grid.addition;\n\n    if (this.isPossibleToContinue()) {\n      if (this.grid.maxValue === this.winValue) {\n        this.won = true;\n      }\n    } else {\n      this.over = true;\n    }\n\n    if (this.won || this.over) {\n      this.input.removeEvents();\n    }\n\n    this.view.updateGameState(this.grid.matrix, this.won, this.over);\n    this.view.updateScoreState(this.score, this.grid.addition);\n    this.view.updateTilesState(this.grid);\n  }\n\n  reload() {\n    this.input.removeEvents();\n    this.view.clear();\n  }\n}\n","import { GameManager } from './components/GameManager';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  let game = new GameManager(4, 2048);\n\n  document.addEventListener('click', (e) => {\n    if (e.target.closest('.game-header__button, .game-body__try-again-btn')) {\n      game.reload();\n      game = new GameManager(4, 2048);\n    }\n  });\n});\n"]}